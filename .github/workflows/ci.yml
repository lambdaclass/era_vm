name: CI

on:
  merge_group:
  push:
    branches: [main]
  pull_request:


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.78.0
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  compile:
    name: Compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Rustup toolchain install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Run cargo check
        run: cargo check --workspace --all-features --all-targets

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4


      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-features --benches --examples --tests -- -D warnings

  test-with-compiler-tester:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout vm sources
          uses: actions/checkout@v4
          with:
            path: ${{ github.workspace }}/era_vm


        - name: LLVM Dependencies
          uses: awalsh128/cache-apt-pkgs-action@latest
          with:
            packages: clang clang-tools build-essential lld ninja-build
            version: 1.0

        - uses: dtolnay/rust-toolchain@1.78.0
          with:
            toolchain: ${{ env.RUST_VERSION }}
            components: clippy

        - name: Checkout compiler-tester source
          uses: actions/checkout@v4
          with:
            repository: lambdaclass/era-compiler-tester
            ref: lambda_era_vm_compatibility
            submodules: recursive
            path: ${{ github.workspace }}/compiler-tester

        - uses: Swatinem/rust-cache@v2

        - name: Fetch zksync-llvm
          uses: dawidd6/action-download-artifact@v6
          with:
            github_token: ${{secrets.GITHUB_TOKEN}}
            workflow: build-binaries.yml
            repo: matter-labs/era-compiler-llvm
            if_not_artifact_found: fail
            path: ${{ github.workspace }}/compiler-tester
            workflow_conclusion: success
            name: llvm-bins-Linux-X64
            search_artifacts: true

        - name: Prepare zksync-llvm
          env:
            cache-name: zksync-llvm-cache
          working-directory: ${{ github.workspace }}/compiler-tester
          run: |
            rm -rfv llvm
            tar -xvf Linux-X64-target-final.tar.gz
            mv target-llvm/target-final/ zksync-llvm
            export LLVM_SYS_170_PREFIX=$(pwd)"/zksync-llvm"
            echo $LLVM_SYS_170_PREFIX
            ls .
            echo "SEP"
            ls zksync-llvm

        - name: Build compiler tester with Lambdaclass VM
          working-directory: ${{ github.workspace }}/compiler-tester
          run: |
            cargo build --verbose --features lambda_vm --release --bin compiler-tester

        - name: Download zksolc compiler
          run: curl -L https://github.com/matter-labs/zksolc-bin/releases/download/v1.5.1/zksolc-linux-amd64-musl-v1.5.1 --output zksolc && chmod +x zksolc && sudo mv zksolc /usr/bin/zksolc

        - name: Download solc compiler
          run: curl -L https://github.com/ethereum/solidity/releases/download/v0.8.25/solc-static-linux --output solc && chmod +x solc && sudo mv solc /usr/bin/solc
        - name: Run compiler-tester tests WITHOUT deployer
          run: |
            cargo run --verbose --features lambda_vm --release --bin compiler-tester -- --path  tests/solidity/simple/yul_instructions/add.sol --target EraVM --mode Y+MsB3 --disable-deployer
